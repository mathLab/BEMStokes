subsection BEMStokes::BEMProblem<3>
  set Consider rigid rotations        = true
  set Extend solution on the -2,2 box = false
  set External refinement             = 4
  set Input grid base name            = ../../../debug_grids/sphere_
  set Input grid format               = inp
  set Number of cycles                = 5
  set Grid                                              = Convergence
  set Run 2d simulation               = true
  set Run 3d simulation               = true
  set Total number of frames          = 120
  subsection Exact solution 2d
    set Function constants  =
    set Function expression = x+y
    set Variable names      = x,y,t
  end
end
subsection Exact solution 2d
  # Any constant used inside the function which is not a variable name.
  set Function constants  =

  # Separate vector valued expressions by ';' as ',' is used internally by the
  # function parser.
  set Function expression = x+y   # default: 0

  # The name of the variables as they will be used in the function, separated
  # by ','.
  set Variable names      = x,y,t
end


subsection Exact solution 3d
  # Any constant used inside the function which is not a variable name.
  set Function constants  =

  # Separate vector valued expressions by ';' as ',' is used internally by the
  # function parser.
  set Function expression = 0.5*(x+y+z)

  # The name of the variables as they will be used in the function, separated
  # by ','.
  set Variable names      = x,y,z,t
end


subsection Quadrature rules
  set Quadrature order          = 18
  set Quadrature type           = gauss
  set Singular quadrature order = 8
end


subsection Solver
  set Log frequency = 1
  set Log history   = false
  set Log result    = true
  set Max steps     = 100000
  set Tolerance     = 1.e-10
end


subsection Velocity function 2d
  # Any constant used inside the function which is not a variable name.
  set Function constants  =

  # Separate vector valued expressions by ';' as ',' is used internally by the
  # function parser.
  set Function expression = 1; 0  # default: 0; 0

  # The name of the variables as they will be used in the function, separated
  # by ','.
  set Variable names      = x,y,t
end


subsection Velocity function 3d
  # Any constant used inside the function which is not a variable name.
  set Function constants  =

  # Separate vector valued expressions by ';' as ',' is used internally by the
  # function parser.
  set Function expression = 1; 0; 0

  # The name of the variables as they will be used in the function, separated
  # by ','.
  set Variable names      = x,y,z,t
end

subsection Finite Element Mapping
  # How to partition the finite element. This information can be used to
  # construct block matrices and vectors, as well as to create names for
  # solution vectors, or error tables. A repeated component is interpreted as
  # a vector field, with dimension equal to the number of repetitions (up to
  # 3). This is used in conjunction with a ParsedFiniteElement class, to
  # generate arbitrary finite dimensional spaces.
  set Blocking of the finite element = u,u,u

  # The finite element space to use. For vector finite elements use the
  # notation FESystem[FE_Q(2)^2-FE_DGP(1)] (e.g. Navier-Stokes).
  set Finite element space           = FESystem<2,3>[FE_DGQArbitraryNodes<2,3>(QGauss(1))^3] #FE_DGQArbitraryNodes<2,3>(QGauss(1))
end

subsection Finite Element Stokes
  # How to partition the finite element. This information can be used to
  # construct block matrices and vectors, as well as to create names for
  # solution vectors, or error tables. A repeated component is interpreted as
  # a vector field, with dimension equal to the number of repetitions (up to
  # 3). This is used in conjunction with a ParsedFiniteElement class, to
  # generate arbitrary finite dimensional spaces.
  set Blocking of the finite element = u,u,u

  # The finite element space to use. For vector finite elements use the
  # notation FESystem[FE_Q(2)^2-FE_DGP(1)] (e.g. Navier-Stokes).
  set Finite element space           = FESystem<2,3>[FE_DGQArbitraryNodes<2,3>(QGauss(1))^3] # FESystem<2,3>[FE_Q<2,3>(2)^3]
end

subsection Internal Quadrature
  # In one space dimension, the given base formula is copied and scaled onto a
  # given number of subintervals of length 1/repetitions. In more than one
  # space dimension, the resulting quadrature formula is constructed in the
  # usual way by building the tensor product of the respective iterated
  # quadrature formula in one space dimension.
  set Number of repetitions  = 1

  # The number of quadrature points in each coordinate direction. (Avaible
  # only for gauss otherwise it should be 0)
  set Quadrature order       = 3

  # Quadrature rule:gauss|midpoint|milne|simpson|trapez|weddle
  set Quadrature to generate = gauss
end
